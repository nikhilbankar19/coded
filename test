import math
from typing import Any, Dict, Optional

# --- WOE tables (extracted from the image) ---
AUDITING_WOE = {
    1: 0.15714,
    2: -0.133515,
    3: -0.133515,
    4: -0.327396
}

IND_PROSPECTS_WOE = {
    1: 0.424515,  # Growing and low volatility
    2: 0.424515,  # Stable (same as 1 in table)
    3: -0.304063,
    4: -1.019823
}

IND_GROUP_WOE = {
    1: 0.344325,  # Industry_Group_1
    2: 0.12117,   # Industry_Group_2
    3: 0.08948,   # Industry_Group_3
    4: -0.690091  # Industry_Group_4
}

REGION_WOE = {
    "developed_asia": 0.387293,
    "eu_na_asia_pac": 0.282428,
    "mea_la_other_missing": -0.69561
}

YEARS_WOE = {
    "0_8": -0.288881,
    "9_21": 0.178082,
    "22_150": 1.715155,
    "missing_or_outside": -0.288881
}

# --- Model coefficients ---
COEFS = {
    "intercept": -4.911121,
    "auditing_firms": -0.945392,
    "industry_prospects": -0.993696,
    "industry_group": -0.786204,
    "region": -1.05275,
    "years_customer_relationship": -0.5
}

# --- Helper mappers that accept ints or strings ---
def map_auditing_firms(val: Any) -> float:
    if val is None:
        return 0.0
    if isinstance(val, (int, float)):
        key = int(val)
        return AUDITING_WOE.get(key, 0.0)
    s = str(val).lower()
    if "top" in s or "4" in s:
        return AUDITING_WOE[1]
    if "recogn" in s or "other" in s:
        return AUDITING_WOE[2]
    if "unaud" in s:
        return AUDITING_WOE[4]
    return 0.0

def map_industry_prospects(val: Any) -> float:
    if val is None:
        return 0.0
    if isinstance(val, (int, float)):
        key = int(val)
        return IND_PROSPECTS_WOE.get(key, 0.0)
    s = str(val).lower()
    if "growing and low" in s or "stable" in s:
        return IND_PROSPECTS_WOE[1]
    if "growing but high" in s:
        return IND_PROSPECTS_WOE[3]
    if "declin" in s:
        return IND_PROSPECTS_WOE[4]
    return 0.0

def map_industry_group(val: Any) -> float:
    if val is None:
        return 0.0
    if isinstance(val, (int, float)):
        key = int(val)
        return IND_GROUP_WOE.get(key, 0.0)
    s = str(val).lower()
    for i in range(1,5):
        if f"group_{i}" in s or f"industry_group_{i}" in s or f"_{i}" in s:
            return IND_GROUP_WOE[i]
    # fallback: try to parse trailing number
    for token in s.split():
        if token.isdigit():
            dig = int(token)
            if dig in IND_GROUP_WOE:
                return IND_GROUP_WOE[dig]
    return 0.0

def map_region(val: Any) -> float:
    if val is None:
        return REGION_WOE["mea_la_other_missing"]
    s = str(val).lower()
    if "develop" in s or ("asia" in s and "develop" in s):
        return REGION_WOE["developed_asia"]
    if "eu" in s or "north america" in s or ("asia" in s and "pacific" in s) or "asia & pacific" in s:
        return REGION_WOE["eu_na_asia_pac"]
    # any other / missing
    return REGION_WOE["mea_la_other_missing"]

def map_years_customer_relationship(years: Optional[float]) -> float:
    # Accepts numeric years; treats missing or outside 0-150 as missing category
    try:
        if years is None:
            return YEARS_WOE["missing_or_outside"]
        y = float(years)
    except Exception:
        return YEARS_WOE["missing_or_outside"]
    if y < 0 or y > 150:
        return YEARS_WOE["missing_or_outside"]
    if y <= 8:
        return YEARS_WOE["0_8"]
    if 9 <= y <= 21:
        return YEARS_WOE["9_21"]
    if 22 <= y <= 150:
        return YEARS_WOE["22_150"]
    return YEARS_WOE["missing_or_outside"]

# --- Main scoring function ---
def qual_lt_500mn_from_raw(input_json: Dict[str, Any]) -> Dict[str, Any]:
    """
    input_json keys (examples):
      - "auditing_firms": 1 or "1 - World top 4 auditors" etc.
      - "industry_prospects": 1..4 or textual
      - "industry_group": 1..4 or "Industry_Group_1"
      - "region": textual (e.g., "Developed Asia", "EU+ & North America", "Middle East & Africa")
      - "years_customer_relationship": numeric (years)
    Returns dict with WOE values used, score and PD.
    """
    woe_aud = map_auditing_firms(input_json.get("auditing_firms"))
    woe_ip = map_industry_prospects(input_json.get("industry_prospects"))
    woe_ig = map_industry_group(input_json.get("industry_group"))
    woe_reg = map_region(input_json.get("region"))
    woe_years = map_years_customer_relationship(input_json.get("years_customer_relationship"))

    # Score computation
    score = (
        COEFS["intercept"]
        + COEFS["auditing_firms"] * woe_aud
        + COEFS["industry_prospects"] * woe_ip
        + COEFS["industry_group"] * woe_ig
        + COEFS["region"] * woe_reg
        + COEFS["years_customer_relationship"] * woe_years
    )

    # PD via logistic
    pd = 1.0 / (1.0 + math.exp(-score))

    return {
        "woe": {
            "auditing_firms": woe_aud,
            "industry_prospects": woe_ip,
            "industry_group": woe_ig,
            "region": woe_reg,
            "years_customer_relationship": woe_years
        },
        "score": score,
        "pd": pd
    }

# --- Example usage ---
if __name__ == "__main__":
    example_input = {
        "auditing_firms": 1,
        "industry_prospects": 1,
        "industry_group": 1,
        "region": "Developed Asia",
        "years_customer_relationship": 12
    }
    out = qual_lt_500mn_from_raw(example_input)
    print(out)
